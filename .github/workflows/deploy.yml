# 프로덕션 배포용 워크플로우 이름
name: Deploy to AWS ECS - discodeit

# 트리거 조건: release 브랜치에 푸쉬 시 자동 실행
on:
  push:
    branches: [release]

# 작업 목록 정의
jobs:
  build-and-push:
    # Job 이름 (UI에 표시)
    name: Build and Push Docker Image
    # GitHub Actions가 사용하는 가상 머신 환경
    runs-on: ubuntu-latest

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. Java 17 환경 설정 (Spring Boot 프로젝트 빌드용)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. AWS 자격 증명 구성 (AWS CLI)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1 # Public ECR은 반드시 us-east-1 리전 사용

      # 4. Public ECR에 로그인
      - name: Login to Amazon Public ECR
        uses: aws-actions/amazon-ecr-login@v1

      # 5. Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image to Public ECR
        env:
          ECR_REGISTRY: ${{ vars.ECR_REPOSITORY_URI }} # ex) public.ecr.aws/abc123/discodeit
          IMAGE_TAG: ${{ github.sha }} # 커밋 해시 기반 태그
        run: |
          # 1. 명령어 실패 시 워크플로우 종료
          set -e
          
          # 2. 현재 레지스트리와 태그 확인 로그
          echo "ECR_REGISTRY = $ECR_REGISTRY"
          echo "IMAGE_TAG = $IMAGE_TAG"
          
          # 3. gradlew 빌드 권한 부여 및 JAR 생성
            # gradlew 파일에 실행 권한 부여
          chmod +x ./gradlew
          echo "Building Spring Boot app..."
            # Spring Boot 애플리케이션 빌드 (JAR 생성)
          ./gradlew bootJar

          # 4. Docker 이미지 빌드 (두 개의 태그: 해시 + latest)
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY:$IMAGE_TAG -t $ECR_REGISTRY:latest .

          # Public ECR에 이미지 푸시
          echo "Pushing Docker image to ECR..."
          docker push $ECR_REGISTRY:$IMAGE_TAG
          docker push $ECR_REGISTRY:latest
